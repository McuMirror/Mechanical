# Script to autogenerate an IGRF coefficient C header file from IGRF12.COF

import datetime

# Helper functions
def isFloat(string):
    try:
        float(string)
        return True
    except ValueError:
        return False

# Open files
igrf = open("IGRF12.COF", "r")
header = open("IGRF12.h", "w")

# Write file header
header.write("/**\n * IGRF12.h\n * Header file for IGRF coefficients\n")
now = datetime.datetime.now()
header.write(" * Autogenerated at "+datetime.datetime.now().strftime("%I:%M%p on %B %d, %Y")+"\n")
header.write("*/\n\n")

header.write("#include stdint.h\n\n")

deg = []
order = []
g1 = []
h1 = []
g2 = []
h2 = []

var = [deg, order, g1, h1, g2, h2]
varnames = ["deg", "order", "g1", "h1", "g2", "h2"]

# Read coefficient file
for line in igrf:
    floats = [float(n) for n in line.split() if isFloat(n)]
    for i in range(0, 5):
        var[i].append(floats[i])

# Write to header file
vals_per_line = 10
for i in range(0, 5):
    if i < 2:
        header.write("uint8_t ")
    else:
        header.write("float ")
    header.write(varnames[i]+"[] = {")
    for j in range(0, len(var[i])):
        header.write(str(var[i][j]))
        if j != len(var[i])-1:
            header.write(", ")
        if (j+1)%vals_per_line == 0:
            header.write("\n\t")
    header.write("};\n\n")

# Close files
igrf.close()
header.close()

