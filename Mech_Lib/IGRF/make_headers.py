# Script to autogenerate an IGRF coefficient C header file from IGRF12.COF

import datetime

# Helper functions
def isFloat(string):
    try:
        float(string)
        return True
    except ValueError:
        return False

# Open files
igrf = open("IGRF12.COF", "r")
header = open("IGRF12.h", "w")

# Write file header
header.write("/**\n * IGRF12.h\n * Header file for IGRF coefficients\n")
now = datetime.datetime.now()
header.write(" * Autogenerated at "+datetime.datetime.now().strftime("%I:%M%p on %B %d, %Y")+"\n")
header.write("*/\n\n")

deg = []
order = []
g1 = []
h1 = []
g2 = []
h2 = []
gh1 = [0.0]
gh2 = [0.0]

invars = [deg, order, g1, h1, g2, h2]

# Read coefficient file
for line in igrf:
    floats = [float(n) for n in line.split() if isFloat(n)]
    for i in range(0, len(invars)):
        invars[i].append(floats[i])
    
    gh1.append(g1[-1])
    gh2.append(g2[-1])
    
    if order[-1] != 0:
        gh1.append(h1[-1])
        gh2.append(h2[-1])


outvars = [gh1, gh2]
varnames = ["float gh1", "float gh2"]

# Write to header file
vals_per_line = 10
for i in range(0, len(outvars)):
    header.write(varnames[i]+"[] = {")
    for j in range(0, len(outvars[i])):
        header.write(str(outvars[i][j]))
        if j != len(outvars[i])-1:
            header.write(", ")
        if (j+1)%vals_per_line == 0:
            header.write("\n\t")
    header.write("};\n\n")

# Close files
igrf.close()
header.close()

